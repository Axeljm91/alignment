/* Copyright Ion Beam Applications */

/*******************************************************************************
    Description
    -----------
    
    RPCGEN source file for module: ecubtcu
*******************************************************************************/

/*******************************************************************************
    Modification history
    --------------------
    01,PBR,30Jan2002      DEV-0008  Generated by python script
*******************************************************************************/


typedef unsigned char UINT8;
typedef unsigned short UINT16;
typedef int STATUS;

typedef char DEVICE_NAME[50];

typedef char ECUBTCU_EQUIPMENT_NAME[20];

typedef char ECUBTCU_DEVICE_NAME[50];

typedef char ECUBTCU_INDEX_NAME[40];

typedef char ECUBTCU_CONFIG_DATA[1280];

typedef int ECUBTCU_CONFIG_TYPE;

typedef char BPM_DEVICE_NAME[50];

typedef char BS_DEVICE_NAME[50];

typedef char STEPPER_DEVICE_NAME[50];

enum BCM_CONVERSION_TYPE {
    BCM_NORMAL_GAIN = 0,
    BCM_DEFAULT_GAIN = BCM_NORMAL_GAIN,
    BCM_HIGH_GAIN,
    BCM_NORMAL_CALIBRATE,
    BCM_HIGH_CALIBRATE,
    BCM_NORMAL_OFFSET,
    BCM_HIGH_OFFSET,
    BCM_NORMAL_FULL_CALIBRATE,
    BCM_HIGH_FULL_CALIBRATE
    };

enum BCM_TRIGGER_TYPE {
    BCM_STROBE_TRIGGER = 0,
    BCM_FALLING_TRIGGER,
    BCM_DEFAULT_TRIGGER = BCM_FALLING_TRIGGER,
    BCM_RISING_TRIGGER
    };

enum BPM_ACQUISITION_MODE {
    BPM_NORMAL_GAIN = 0,
    BPM_HIGH_GAIN,
    BPM_NORMAL_CALIBRATE,
    BPM_HIGH_CALIBRATE,
    BPM_NORMAL_OFFSET,
    BPM_HIGH_OFFSET,
    BPM_NORMAL_FULL_CALIBRATE,
    BPM_HIGH_FULL_CALIBRATE
    };

enum BPM_TRIGGER_TYPE {
    BPM_STROBE_TRIGGER = 0,
    BPM_FALLING_TRIGGER,
    BPM_RISING_TRIGGER
    };

enum CANMAGNET_ROOM {
    CANMAGNET_ROOM1,
    CANMAGNET_ROOM2,
    CANMAGNET_ROOM3,
    CANMAGNET_ROOM4
    };

enum BEAM_TUNING_BEAM_LINES_NAMES {
    BEAM_TUNING_BEAM_LINE_FIRST_LINE,
    BEAM_TUNING_BEAM_LINE_1 = BEAM_TUNING_BEAM_LINE_FIRST_LINE,
    BEAM_TUNING_BEAM_LINE_2,
    BEAM_TUNING_BEAM_LINE_3,
    BEAM_TUNING_BEAM_LINE_4,
    BEAM_TUNING_BEAM_LINE_5,
    BEAM_TUNING_BEAM_LINE_6,
    BEAM_TUNING_BEAM_LINE_UNKNOWN
    };

enum BEAM_LINE_REF_SETPOINT_TYPE {
    BEAM_LINE_REF_SETPOINT_RANGE,
    BEAM_LINE_REF_SETPOINT_TUNING,
    BEAM_LINE_REF_SETPOINT_LAST_TYPE
    };

enum BEAM_TUNING_MODE {
    BEAM_TUNING_AUTOMATIC = 0,
    BEAM_TUNING_IRRADIATION,
    BEAM_TUNING_IDLE,
    BEAM_TUNING_LAST_MODE
    };

enum BEAM_TUNING_TREATMENT_MODE {
    BEAM_TUNING_TREATMENT_NO_MODE = 0,
    BEAM_TUNING_TREATMENT_WOBBLING,
    BEAM_TUNING_TREATMENT_DSCAT,
    BEAM_TUNING_TREATMENT_LAST_MODE
    };

struct ECU_TCU_RESPONSE {
    UINT8 xValueIsValid;
    UINT8 yValueIsValid;
    double xSkewness;
    double ySkewness;
    double IC23xSigma;
    double IC1xSigma;
    double IC23ySigma;
    double IC1ySigma;
    double xMean;
    double yMean;
    double IC23totalCount;
    double IC1totalCount;
    UINT8 acquisitionId;
    };

struct ecubtcuEcubtcuSetConfiguration_in {
    ECUBTCU_EQUIPMENT_NAME pEquipmentName;
    ECUBTCU_DEVICE_NAME pDeviceName;
    ECUBTCU_INDEX_NAME pParameterName;
    ECUBTCU_CONFIG_DATA pValue;
    ECUBTCU_CONFIG_TYPE type;
};

struct ecubtcuEcubtcuSetConfiguration_out {
    STATUS returnValue;
};

struct ecubtcuEcubtcuEndSetConfiguration_out {
    STATUS returnValue;
};

struct ecubtcuEcubtcuRequestShutdown_out {
    STATUS returnValue;
};

struct ecubtcuGroup3SetOffset_in {
    double offset;
};

struct ecubtcuGroup3SetOffset_out {
    STATUS returnValue;
};

struct ecubtcuGroup3SetGain_in {
    double gain;
};

struct ecubtcuGroup3SetGain_out {
    STATUS returnValue;
};

struct ecubtcuBpmInsert_in {
    BPM_DEVICE_NAME pName;
};

struct ecubtcuBpmInsert_out {
    STATUS returnValue;
};

struct ecubtcuBpmRetract_in {
    BPM_DEVICE_NAME pName;
};

struct ecubtcuBpmRetract_out {
    STATUS returnValue;
};

struct ecubtcuBpmCheckInsert_in {
    BPM_DEVICE_NAME pName;
};

struct ecubtcuBpmCheckInsert_out {
    STATUS returnValue;
};

struct ecubtcuBpmCheckRetract_in {
    BPM_DEVICE_NAME pName;
};

struct ecubtcuBpmCheckRetract_out {
    STATUS returnValue;
};

struct ecubtcuBsInsert_in {
    BS_DEVICE_NAME pName;
};

struct ecubtcuBsInsert_out {
    STATUS returnValue;
};

struct ecubtcuBsRetract_in {
    BS_DEVICE_NAME pName;
};

struct ecubtcuBsRetract_out {
    STATUS returnValue;
};

struct ecubtcuBsCheckInsert_in {
    BS_DEVICE_NAME pName;
};

struct ecubtcuBsCheckInsert_out {
    STATUS returnValue;
};

struct ecubtcuBsCheckRetract_in {
    BS_DEVICE_NAME pName;
};

struct ecubtcuBsCheckRetract_out {
    STATUS returnValue;
};

struct ecubtcuStepperIoExcite_in {
    STEPPER_DEVICE_NAME pName;
};

struct ecubtcuStepperIoExcite_out {
    STATUS returnValue;
};

struct ecubtcuStepperIoDesexcite_in {
    STEPPER_DEVICE_NAME pName;
};

struct ecubtcuStepperIoDesexcite_out {
    STATUS returnValue;
};

struct ecubtcuStepperIoCheckExcitation_in {
    STEPPER_DEVICE_NAME pName;
};

struct ecubtcuStepperIoCheckExcitation_out {
    STATUS returnValue;
};

struct ecubtcuBcmStartCalibration_in {
    DEVICE_NAME pName;
};

struct ecubtcuBcmStartCalibration_out {
    STATUS returnValue;
};

struct ecubtcuBcmAllStartCalibration_out {
    STATUS returnValue;
};

struct ecubtcuBcmChangeMode_in {
    DEVICE_NAME pName;
    BCM_CONVERSION_TYPE mode;
    BCM_TRIGGER_TYPE acqType;
};

struct ecubtcuBcmChangeMode_out {
    STATUS returnValue;
};

struct ecubtcuBcmReset_in {
    DEVICE_NAME pName;
};

struct ecubtcuBcmReset_out {
    STATUS returnValue;
};

struct ecubtcuBcmAllReset_out {
    STATUS returnValue;
};

struct ecubtcuBpmStartContinuousAcquisition_in {
    DEVICE_NAME pName;
};

struct ecubtcuBpmStartContinuousAcquisition_out {
    STATUS returnValue;
};

struct ecubtcuBpmStopContinuousAcquisition_in {
    DEVICE_NAME pName;
};

struct ecubtcuBpmStopContinuousAcquisition_out {
    STATUS returnValue;
};

struct ecubtcuBpmAllStartCalibration_out {
    STATUS returnValue;
};

struct ecubtcuBpmStartCalibration_in {
    DEVICE_NAME pName;
};

struct ecubtcuBpmStartCalibration_out {
    STATUS returnValue;
};

struct ecubtcuBpmStartProfileAcquisition_in {
    DEVICE_NAME pName;
    int sample;
};

struct ecubtcuBpmStartProfileAcquisition_out {
    STATUS returnValue;
};

struct ecubtcuBpmStopProfileAcquisition_in {
    DEVICE_NAME pName;
};

struct ecubtcuBpmStopProfileAcquisition_out {
    STATUS returnValue;
};

struct ecubtcuBpmChangeGain_in {
    DEVICE_NAME pName;
    int gain;
};

struct ecubtcuBpmChangeGain_out {
    STATUS returnValue;
};

struct ecubtcuBpmChangeMode_in {
    DEVICE_NAME pName;
    BPM_ACQUISITION_MODE mode;
    BPM_TRIGGER_TYPE acqType;
};

struct ecubtcuBpmChangeMode_out {
    STATUS returnValue;
};

struct ecubtcuBpmDecreaseRangeByFactor_in {
    DEVICE_NAME pName;
    double factor;
};

struct ecubtcuBpmDecreaseRangeByFactor_out {
    STATUS returnValue;
};

struct ecubtcuBpmIncreaseRangeByFactor_in {
    DEVICE_NAME pName;
    double factor;
};

struct ecubtcuBpmIncreaseRangeByFactor_out {
    STATUS returnValue;
};

struct ecubtcuBpmAllReset_out {
    STATUS returnValue;
};

struct ecubtcuBpmReset_in {
    DEVICE_NAME pName;
};

struct ecubtcuBpmReset_out {
    STATUS returnValue;
};

struct ecubtcuCanMagnetSelectTreatmentRoom_in {
    CANMAGNET_ROOM roomId;
};

struct ecubtcuCanMagnetSelectTreatmentRoom_out {
    STATUS returnValue;
};

struct ecubtcuCanMagnetSetValue_in {
    DEVICE_NAME pName;
    UINT16 setPoint;
};

struct ecubtcuCanMagnetSetValue_out {
    STATUS returnValue;
};

struct ecubtcuCanMagnetSetCurrent_in {
    DEVICE_NAME pName;
    double setCurrent;
};

struct ecubtcuCanMagnetSetCurrent_out {
    STATUS returnValue;
};

struct ecubtcuCanMagnetSetField_in {
    DEVICE_NAME pName;
    double setField;
};

struct ecubtcuCanMagnetSetField_out {
    STATUS returnValue;
};

struct ecubtcuCanMagnetStartCyclingDigit_in {
    DEVICE_NAME pName;
    UINT16 setPoint;
};

struct ecubtcuCanMagnetStartCyclingDigit_out {
    STATUS returnValue;
};

struct ecubtcuCanMagnetStartCyclingCurrent_in {
    DEVICE_NAME pName;
    double setCurrent;
};

struct ecubtcuCanMagnetStartCyclingCurrent_out {
    STATUS returnValue;
};

struct ecubtcuCanMagnetStartCyclingField_in {
    DEVICE_NAME pName;
    double setField;
};

struct ecubtcuCanMagnetStartCyclingField_out {
    STATUS returnValue;
};

struct ecubtcuCanMagnetAllStartCyclingCurrent_out {
    STATUS returnValue;
};

struct ecubtcuCanMagnetUpdateB1234Field_in {
    double newField;
};

struct ecubtcuCanMagnetUpdateB1234Field_out {
    STATUS returnValue;
};

struct ecubtcuDegraderGoHome_out {
    STATUS returnValue;
};

struct ecubtcuDegraderHighGoPosition_in {
    int steps;
};

struct ecubtcuDegraderHighGoPosition_out {
    STATUS returnValue;
};

struct ecubtcuDegraderGoSpecialBlock_in {
    unsigned int blockId;
};

struct ecubtcuDegraderGoSpecialBlock_out {
    STATUS returnValue;
};

struct ecubtcuDegraderGoStair_in {
    int stairIndex;
};

struct ecubtcuDegraderGoStair_out {
    STATUS returnValue;
};

struct ecubtcuDegraderGoOnePlus_out {
    STATUS returnValue;
};

struct ecubtcuDegraderGoOneMinus_out {
    STATUS returnValue;
};

struct ecubtcuDegraderCheckSpecialBlock_in {
    unsigned int blockId;
};

struct ecubtcuDegraderCheckSpecialBlock_out {
    STATUS returnValue;
};

struct ecubtcuDegraderGoRelative_in {
    int relStair;
};

struct ecubtcuDegraderGoRelative_out {
    STATUS returnValue;
};

struct ecubtcuDegraderCheckStair_in {
    int param;
};

struct ecubtcuDegraderCheckStair_out {
    STATUS returnValue;
};

struct ecubtcuDegraderGoEnergy_in {
    double energy;
};

struct ecubtcuDegraderGoEnergy_out {
    STATUS returnValue;
};

struct ecubtcuDegraderCheckEnergy_in {
    double energy;
};

struct ecubtcuDegraderCheckEnergy_out {
    STATUS returnValue;
};

struct ecubtcuDegarderStop_out {
    STATUS returnValue;
};

struct ecubtcuIseuRequestSetLookUpMode_out {
    STATUS returnValue;
};

struct ecubtcuIseuRequestSetInternalPulseMode_out {
    STATUS returnValue;
};

struct ecubtcuIseuRequestSetTreatmentRoom_in {
    int roomId;
};

struct ecubtcuIseuRequestSetTreatmentRoom_out {
    STATUS returnValue;
};

struct ecubtcuIseuRequestSetEndOfTreatmentMode_out {
    STATUS returnValue;
};

struct ecubtcuIseuRequestGeneratePulse_out {
    STATUS returnValue;
};

struct ecubtcuIseuRequestSetSinglePulseMode_in {
    int flag;
};

struct ecubtcuIseuRequestSetSinglePulseMode_out {
    STATUS returnValue;
};

struct ecubtcuIseuRequestBypassRegulation_in {
    int flag;
};

struct ecubtcuIseuRequestBypassRegulation_out {
    STATUS returnValue;
};

struct ecubtcuIseuRequestSetCurrentAtCycloExit_in {
    double current;
};

struct ecubtcuIseuRequestSetCurrentAtCycloExit_out {
    STATUS returnValue;
};

struct ecubtcuMotorisedSlitsHome_in {
    DEVICE_NAME pName;
};

struct ecubtcuMotorisedSlitsHome_out {
    STATUS returnValue;
};

struct ecubtcuMotorisedSlitsGoHome_in {
    DEVICE_NAME pName;
};

struct ecubtcuMotorisedSlitsGoHome_out {
    STATUS returnValue;
};

struct ecubtcuMotorisedSlitsGoToPosition_in {
    DEVICE_NAME pName;
    unsigned int pPosition;
};

struct ecubtcuMotorisedSlitsGoToPosition_out {
    STATUS returnValue;
};

struct ecubtcuMotorisedSlitsGoToOpening_in {
    DEVICE_NAME pName;
    double pOpening;
};

struct ecubtcuMotorisedSlitsGoToOpening_out {
    STATUS returnValue;
};

struct ecubtcuMotorisedSlitsStop_in {
    DEVICE_NAME pName;
};

struct ecubtcuMotorisedSlitsStop_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineSelectBeamLine_in {
    BEAM_TUNING_BEAM_LINES_NAMES beamLineName;
    int roomId;
};

struct ecubtcuBeamLineSelectBeamLine_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineUnselectBeamLine_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineSetRange_in {
    double range;
    double gantryAngle;
    int beamlineOptionId;
};

struct ecubtcuBeamLineSetRange_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineSetDegraderToRange_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineSetLineToRange_in {
    double range;
    double gantryAngle;
    int beamlineOptionId;
};

struct ecubtcuBeamLineSetLineToRange_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineSelectAndSetToRange_in {
    BEAM_TUNING_BEAM_LINES_NAMES beamLineName;
    double range;
    double gantryAngle;
    int beamlineOptionId;
};

struct ecubtcuBeamLineSelectAndSetToRange_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineSetDegraderToBeamStop_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineStartTuning_in {
    BEAM_TUNING_MODE mode;
    BEAM_TUNING_TREATMENT_MODE treatmentMode;
};

struct ecubtcuBeamLineStartTuning_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineStopTuning_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineResetTuning_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineTuneNextBlock_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineRedoTuningBlock_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineByPassTuningBlock_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineManualAcquire_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineStopManualAcquire_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineSaveReferenceSetPoint_in {
    BEAM_TUNING_BEAM_LINES_NAMES beamLineName;
    BEAM_LINE_REF_SETPOINT_TYPE referenceType;
};

struct ecubtcuBeamLineSaveReferenceSetPoint_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineStartPhaseSpace_in {
    DEVICE_NAME pMeasName;
    DEVICE_NAME pMagnetName;
    int numberOfStep;
    double lowSetpoint;
    double highSetpoint;
};

struct ecubtcuBeamLineStartPhaseSpace_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineTurnOnBeamLineModularDevices_in {
    BEAM_TUNING_BEAM_LINES_NAMES beamLineName;
};

struct ecubtcuBeamLineTurnOnBeamLineModularDevices_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineTurnOffBeamLineModularDevices_in {
    BEAM_TUNING_BEAM_LINES_NAMES beamLineName;
};

struct ecubtcuBeamLineTurnOffBeamLineModularDevices_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineTurnOnEssModularDevices_out {
    STATUS returnValue;
};

struct ecubtcuBeamLineTurnOffEssModularDevices_out {
    STATUS returnValue;
};

struct ecubtcuEcuTcuBeamTuningNotStarted_out {
    STATUS returnValue;
};

struct ecubtcuEcuTcuBeamTuningStarted_out {
    STATUS returnValue;
};

struct ecubtcuEcuTcuCountingNotStarted_out {
    STATUS returnValue;
};

struct ecubtcuEcuTcuCountingStarted_out {
    STATUS returnValue;
};

struct ecubtcuEcuTcuOnRequestAcquisition_in {
    ECU_TCU_RESPONSE response;
};

struct ecubtcuEcuTcuOnRequestAcquisition_out {
    STATUS returnValue;
};

struct ecubtcuAnalogPsSetVoltage_in {
    DEVICE_NAME pName;
    double setVoltage;
};

struct ecubtcuAnalogPsSetVoltage_out {
    STATUS returnValue;
};

struct ecubtcuAnalogPsSetCurrent_in {
    DEVICE_NAME pName;
    double setCurrent;
};

struct ecubtcuAnalogPsSetCurrent_out {
    STATUS returnValue;
};

struct ecubtcuModularPsSetCurrent_in {
    DEVICE_NAME pName;
    double setCurrent;
};

struct ecubtcuModularPsSetCurrent_out {
    STATUS returnValue;
};

struct ecubtcuModularPsSetOnStandby_in {
    DEVICE_NAME pName;
    int request;
};

struct ecubtcuModularPsSetOnStandby_out {
    STATUS returnValue;
};

program RPC_PROGRAM {
    version RPC_VERSION {
        ecubtcuEcubtcuSetConfiguration_out ECUBTCUECUBTCUSETCONFIGURATION(ecubtcuEcubtcuSetConfiguration_in) = 1;
        ecubtcuEcubtcuEndSetConfiguration_out ECUBTCUECUBTCUENDSETCONFIGURATION(void) = 2;
        ecubtcuEcubtcuRequestShutdown_out ECUBTCUECUBTCUREQUESTSHUTDOWN(void) = 3;
        ecubtcuGroup3SetOffset_out ECUBTCUGROUP3SETOFFSET(ecubtcuGroup3SetOffset_in) = 4;
        ecubtcuGroup3SetGain_out ECUBTCUGROUP3SETGAIN(ecubtcuGroup3SetGain_in) = 5;
        ecubtcuBpmInsert_out ECUBTCUBPMINSERT(ecubtcuBpmInsert_in) = 6;
        ecubtcuBpmRetract_out ECUBTCUBPMRETRACT(ecubtcuBpmRetract_in) = 7;
        ecubtcuBpmCheckInsert_out ECUBTCUBPMCHECKINSERT(ecubtcuBpmCheckInsert_in) = 8;
        ecubtcuBpmCheckRetract_out ECUBTCUBPMCHECKRETRACT(ecubtcuBpmCheckRetract_in) = 9;
        ecubtcuBsInsert_out ECUBTCUBSINSERT(ecubtcuBsInsert_in) = 10;
        ecubtcuBsRetract_out ECUBTCUBSRETRACT(ecubtcuBsRetract_in) = 11;
        ecubtcuBsCheckInsert_out ECUBTCUBSCHECKINSERT(ecubtcuBsCheckInsert_in) = 12;
        ecubtcuBsCheckRetract_out ECUBTCUBSCHECKRETRACT(ecubtcuBsCheckRetract_in) = 13;
        ecubtcuStepperIoExcite_out ECUBTCUSTEPPERIOEXCITE(ecubtcuStepperIoExcite_in) = 14;
        ecubtcuStepperIoDesexcite_out ECUBTCUSTEPPERIODESEXCITE(ecubtcuStepperIoDesexcite_in) = 15;
        ecubtcuStepperIoCheckExcitation_out ECUBTCUSTEPPERIOCHECKEXCITATION(ecubtcuStepperIoCheckExcitation_in) = 16;
        ecubtcuBcmStartCalibration_out ECUBTCUBCMSTARTCALIBRATION(ecubtcuBcmStartCalibration_in) = 17;
        ecubtcuBcmAllStartCalibration_out ECUBTCUBCMALLSTARTCALIBRATION(void) = 18;
        ecubtcuBcmChangeMode_out ECUBTCUBCMCHANGEMODE(ecubtcuBcmChangeMode_in) = 19;
        ecubtcuBcmReset_out ECUBTCUBCMRESET(ecubtcuBcmReset_in) = 20;
        ecubtcuBcmAllReset_out ECUBTCUBCMALLRESET(void) = 21;
        ecubtcuBpmStartContinuousAcquisition_out ECUBTCUBPMSTARTCONTINUOUSACQUISITION(ecubtcuBpmStartContinuousAcquisition_in) = 22;
        ecubtcuBpmStopContinuousAcquisition_out ECUBTCUBPMSTOPCONTINUOUSACQUISITION(ecubtcuBpmStopContinuousAcquisition_in) = 23;
        ecubtcuBpmAllStartCalibration_out ECUBTCUBPMALLSTARTCALIBRATION(void) = 24;
        ecubtcuBpmStartCalibration_out ECUBTCUBPMSTARTCALIBRATION(ecubtcuBpmStartCalibration_in) = 25;
        ecubtcuBpmStartProfileAcquisition_out ECUBTCUBPMSTARTPROFILEACQUISITION(ecubtcuBpmStartProfileAcquisition_in) = 26;
        ecubtcuBpmStopProfileAcquisition_out ECUBTCUBPMSTOPPROFILEACQUISITION(ecubtcuBpmStopProfileAcquisition_in) = 27;
        ecubtcuBpmChangeGain_out ECUBTCUBPMCHANGEGAIN(ecubtcuBpmChangeGain_in) = 28;
        ecubtcuBpmChangeMode_out ECUBTCUBPMCHANGEMODE(ecubtcuBpmChangeMode_in) = 29;
        ecubtcuBpmDecreaseRangeByFactor_out ECUBTCUBPMDECREASERANGEBYFACTOR(ecubtcuBpmDecreaseRangeByFactor_in) = 30;
        ecubtcuBpmIncreaseRangeByFactor_out ECUBTCUBPMINCREASERANGEBYFACTOR(ecubtcuBpmIncreaseRangeByFactor_in) = 31;
        ecubtcuBpmAllReset_out ECUBTCUBPMALLRESET(void) = 32;
        ecubtcuBpmReset_out ECUBTCUBPMRESET(ecubtcuBpmReset_in) = 33;
        ecubtcuCanMagnetSelectTreatmentRoom_out ECUBTCUCANMAGNETSELECTTREATMENTROOM(ecubtcuCanMagnetSelectTreatmentRoom_in) = 34;
        ecubtcuCanMagnetSetValue_out ECUBTCUCANMAGNETSETVALUE(ecubtcuCanMagnetSetValue_in) = 35;
        ecubtcuCanMagnetSetCurrent_out ECUBTCUCANMAGNETSETCURRENT(ecubtcuCanMagnetSetCurrent_in) = 36;
        ecubtcuCanMagnetSetField_out ECUBTCUCANMAGNETSETFIELD(ecubtcuCanMagnetSetField_in) = 37;
        ecubtcuCanMagnetStartCyclingDigit_out ECUBTCUCANMAGNETSTARTCYCLINGDIGIT(ecubtcuCanMagnetStartCyclingDigit_in) = 38;
        ecubtcuCanMagnetStartCyclingCurrent_out ECUBTCUCANMAGNETSTARTCYCLINGCURRENT(ecubtcuCanMagnetStartCyclingCurrent_in) = 39;
        ecubtcuCanMagnetStartCyclingField_out ECUBTCUCANMAGNETSTARTCYCLINGFIELD(ecubtcuCanMagnetStartCyclingField_in) = 40;
        ecubtcuCanMagnetAllStartCyclingCurrent_out ECUBTCUCANMAGNETALLSTARTCYCLINGCURRENT(void) = 41;
        ecubtcuCanMagnetUpdateB1234Field_out ECUBTCUCANMAGNETUPDATEB1234FIELD(ecubtcuCanMagnetUpdateB1234Field_in) = 42;
        ecubtcuDegraderGoHome_out ECUBTCUDEGRADERGOHOME(void) = 43;
        ecubtcuDegraderHighGoPosition_out ECUBTCUDEGRADERHIGHGOPOSITION(ecubtcuDegraderHighGoPosition_in) = 44;
        ecubtcuDegraderGoSpecialBlock_out ECUBTCUDEGRADERGOSPECIALBLOCK(ecubtcuDegraderGoSpecialBlock_in) = 45;
        ecubtcuDegraderGoStair_out ECUBTCUDEGRADERGOSTAIR(ecubtcuDegraderGoStair_in) = 46;
        ecubtcuDegraderGoOnePlus_out ECUBTCUDEGRADERGOONEPLUS(void) = 47;
        ecubtcuDegraderGoOneMinus_out ECUBTCUDEGRADERGOONEMINUS(void) = 48;
        ecubtcuDegraderCheckSpecialBlock_out ECUBTCUDEGRADERCHECKSPECIALBLOCK(ecubtcuDegraderCheckSpecialBlock_in) = 49;
        ecubtcuDegraderGoRelative_out ECUBTCUDEGRADERGORELATIVE(ecubtcuDegraderGoRelative_in) = 50;
        ecubtcuDegraderCheckStair_out ECUBTCUDEGRADERCHECKSTAIR(ecubtcuDegraderCheckStair_in) = 51;
        ecubtcuDegraderGoEnergy_out ECUBTCUDEGRADERGOENERGY(ecubtcuDegraderGoEnergy_in) = 52;
        ecubtcuDegraderCheckEnergy_out ECUBTCUDEGRADERCHECKENERGY(ecubtcuDegraderCheckEnergy_in) = 53;
        ecubtcuDegarderStop_out ECUBTCUDEGARDERSTOP(void) = 54;
        ecubtcuIseuRequestSetLookUpMode_out ECUBTCUISEUREQUESTSETLOOKUPMODE(void) = 55;
        ecubtcuIseuRequestSetInternalPulseMode_out ECUBTCUISEUREQUESTSETINTERNALPULSEMODE(void) = 56;
        ecubtcuIseuRequestSetTreatmentRoom_out ECUBTCUISEUREQUESTSETTREATMENTROOM(ecubtcuIseuRequestSetTreatmentRoom_in) = 57;
        ecubtcuIseuRequestSetEndOfTreatmentMode_out ECUBTCUISEUREQUESTSETENDOFTREATMENTMODE(void) = 58;
        ecubtcuIseuRequestGeneratePulse_out ECUBTCUISEUREQUESTGENERATEPULSE(void) = 59;
        ecubtcuIseuRequestSetSinglePulseMode_out ECUBTCUISEUREQUESTSETSINGLEPULSEMODE(ecubtcuIseuRequestSetSinglePulseMode_in) = 60;
        ecubtcuIseuRequestBypassRegulation_out ECUBTCUISEUREQUESTBYPASSREGULATION(ecubtcuIseuRequestBypassRegulation_in) = 61;
        ecubtcuIseuRequestSetCurrentAtCycloExit_out ECUBTCUISEUREQUESTSETCURRENTATCYCLOEXIT(ecubtcuIseuRequestSetCurrentAtCycloExit_in) = 62;
        ecubtcuMotorisedSlitsHome_out ECUBTCUMOTORISEDSLITSHOME(ecubtcuMotorisedSlitsHome_in) = 63;
        ecubtcuMotorisedSlitsGoHome_out ECUBTCUMOTORISEDSLITSGOHOME(ecubtcuMotorisedSlitsGoHome_in) = 64;
        ecubtcuMotorisedSlitsGoToPosition_out ECUBTCUMOTORISEDSLITSGOTOPOSITION(ecubtcuMotorisedSlitsGoToPosition_in) = 65;
        ecubtcuMotorisedSlitsGoToOpening_out ECUBTCUMOTORISEDSLITSGOTOOPENING(ecubtcuMotorisedSlitsGoToOpening_in) = 66;
        ecubtcuMotorisedSlitsStop_out ECUBTCUMOTORISEDSLITSSTOP(ecubtcuMotorisedSlitsStop_in) = 67;
        ecubtcuBeamLineSelectBeamLine_out ECUBTCUBEAMLINESELECTBEAMLINE(ecubtcuBeamLineSelectBeamLine_in) = 68;
        ecubtcuBeamLineUnselectBeamLine_out ECUBTCUBEAMLINEUNSELECTBEAMLINE(void) = 69;
        ecubtcuBeamLineSetRange_out ECUBTCUBEAMLINESETRANGE(ecubtcuBeamLineSetRange_in) = 70;
        ecubtcuBeamLineSetDegraderToRange_out ECUBTCUBEAMLINESETDEGRADERTORANGE(void) = 71;
        ecubtcuBeamLineSetLineToRange_out ECUBTCUBEAMLINESETLINETORANGE(ecubtcuBeamLineSetLineToRange_in) = 72;
        ecubtcuBeamLineSelectAndSetToRange_out ECUBTCUBEAMLINESELECTANDSETTORANGE(ecubtcuBeamLineSelectAndSetToRange_in) = 73;
        ecubtcuBeamLineSetDegraderToBeamStop_out ECUBTCUBEAMLINESETDEGRADERTOBEAMSTOP(void) = 74;
        ecubtcuBeamLineStartTuning_out ECUBTCUBEAMLINESTARTTUNING(ecubtcuBeamLineStartTuning_in) = 75;
        ecubtcuBeamLineStopTuning_out ECUBTCUBEAMLINESTOPTUNING(void) = 76;
        ecubtcuBeamLineResetTuning_out ECUBTCUBEAMLINERESETTUNING(void) = 77;
        ecubtcuBeamLineTuneNextBlock_out ECUBTCUBEAMLINETUNENEXTBLOCK(void) = 78;
        ecubtcuBeamLineRedoTuningBlock_out ECUBTCUBEAMLINEREDOTUNINGBLOCK(void) = 79;
        ecubtcuBeamLineByPassTuningBlock_out ECUBTCUBEAMLINEBYPASSTUNINGBLOCK(void) = 80;
        ecubtcuBeamLineManualAcquire_out ECUBTCUBEAMLINEMANUALACQUIRE(void) = 81;
        ecubtcuBeamLineStopManualAcquire_out ECUBTCUBEAMLINESTOPMANUALACQUIRE(void) = 82;
        ecubtcuBeamLineSaveReferenceSetPoint_out ECUBTCUBEAMLINESAVEREFERENCESETPOINT(ecubtcuBeamLineSaveReferenceSetPoint_in) = 83;
        ecubtcuBeamLineStartPhaseSpace_out ECUBTCUBEAMLINESTARTPHASESPACE(ecubtcuBeamLineStartPhaseSpace_in) = 84;
        ecubtcuBeamLineTurnOnBeamLineModularDevices_out ECUBTCUBEAMLINETURNONBEAMLINEMODULARDEVICES(ecubtcuBeamLineTurnOnBeamLineModularDevices_in) = 85;
        ecubtcuBeamLineTurnOffBeamLineModularDevices_out ECUBTCUBEAMLINETURNOFFBEAMLINEMODULARDEVICES(ecubtcuBeamLineTurnOffBeamLineModularDevices_in) = 86;
        ecubtcuBeamLineTurnOnEssModularDevices_out ECUBTCUBEAMLINETURNONESSMODULARDEVICES(void) = 87;
        ecubtcuBeamLineTurnOffEssModularDevices_out ECUBTCUBEAMLINETURNOFFESSMODULARDEVICES(void) = 88;
        ecubtcuEcuTcuBeamTuningNotStarted_out ECUBTCUECUTCUBEAMTUNINGNOTSTARTED(void) = 89;
        ecubtcuEcuTcuBeamTuningStarted_out ECUBTCUECUTCUBEAMTUNINGSTARTED(void) = 90;
        ecubtcuEcuTcuCountingNotStarted_out ECUBTCUECUTCUCOUNTINGNOTSTARTED(void) = 91;
        ecubtcuEcuTcuCountingStarted_out ECUBTCUECUTCUCOUNTINGSTARTED(void) = 92;
        ecubtcuEcuTcuOnRequestAcquisition_out ECUBTCUECUTCUONREQUESTACQUISITION(ecubtcuEcuTcuOnRequestAcquisition_in) = 93;
        ecubtcuAnalogPsSetVoltage_out ECUBTCUANALOGPSSETVOLTAGE(ecubtcuAnalogPsSetVoltage_in) = 94;
        ecubtcuAnalogPsSetCurrent_out ECUBTCUANALOGPSSETCURRENT(ecubtcuAnalogPsSetCurrent_in) = 95;
        ecubtcuModularPsSetCurrent_out ECUBTCUMODULARPSSETCURRENT(ecubtcuModularPsSetCurrent_in) = 96;
        ecubtcuModularPsSetOnStandby_out ECUBTCUMODULARPSSETONSTANDBY(ecubtcuModularPsSetOnStandby_in) = 97;
    } = 1;
} = 55555129;
