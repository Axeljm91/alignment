/* Copyright Ion Beam Applications */

/*******************************************************************************
    Description
    -----------

    RPCGEN source file for module: ecubtcu
*******************************************************************************/

/*******************************************************************************
    Modification history
    --------------------
    01,PBR,30Jan2002      DEV-0008  Generated by python script
*******************************************************************************/


typedef unsigned char UINT8;

typedef unsigned short UINT16;

typedef int STATUS;

typedef char DEVICE_NAME[20];

typedef char ECUBTCU_EQUIPMENT_NAME[20];

typedef char ECUBTCU_DEVICE_NAME[20];

typedef char ECUBTCU_INDEX_NAME[40];

typedef char ECUBTCU_CONFIG_DATA[640];

typedef char BPM_DEVICE_NAME[20];

typedef char BS_DEVICE_NAME[20];

typedef char STEPPER_DEVICE_NAME[20];

enum BCM_CONVERSION_TYPE {
    BCM_NORMAL_GAIN = 0,
    BCM_HIGH_GAIN,
    BCM_DEFAULT_GAIN = BCM_HIGH_GAIN,
    BCM_NORMAL_CALIBRATE,
    BCM_HIGH_CALIBRATE,
    BCM_NORMAL_OFFSET,
    BCM_HIGH_OFFSET,
    BCM_NORMAL_FULL_CALIBRATE,
    BCM_HIGH_FULL_CALIBRATE
    };

enum BCM_TRIGGER_TYPE {
    BCM_STROBE_TRIGGER = 0,
    BCM_FALLING_TRIGGER,
    BCM_DEFAULT_TRIGGER = BCM_FALLING_TRIGGER,
    BCM_RISING_TRIGGER
    };

enum BPM_ACQUISITION_MODE {
    BPM_NORMAL_GAIN = 0,
    BPM_HIGH_GAIN,
    BPM_NORMAL_CALIBRATE,
    BPM_HIGH_CALIBRATE,
    BPM_NORMAL_OFFSET,
    BPM_HIGH_OFFSET,
    BPM_NORMAL_FULL_CALIBRATE,
    BPM_HIGH_FULL_CALIBRATE
    };

enum BPM_TRIGGER_TYPE {
    BPM_STROBE_TRIGGER = 0,
    BPM_FALLING_TRIGGER,
    BPM_RISING_TRIGGER
    };

enum BEAM_LINE_REF_SETPOINT_TYPE {
    BEAM_LINE_REF_SETPOINT_RANGE,
    BEAM_LINE_REF_SETPOINT_TUNING,
    BEAM_LINE_REF_SETPOINT_LAST_TYPE
    };

enum BEAM_TUNING_BEAM_LINES_NAMES {
    BEAM_TUNING_BEAM_LINE_1,
    BEAM_TUNING_BEAM_LINE_2,
    BEAM_TUNING_BEAM_LINE_UNKNOWN
    };

enum BEAM_TUNING_MODE {
    BEAM_TUNING_AUTOMATIC = 0,
    BEAM_TUNING_IRRADIATION,
    BEAM_TUNING_IDLE,
    BEAM_TUNING_LAST_MODE
    };

struct ECU_TCU_RESPONSE {
    UINT8 xValueIsValid;
    UINT8 yValueIsValid;
    double xValue;
    double yValue;
    double xSigma;
    double ySigma;
    double totalCount;
    UINT8 acquisitionId;
    };

struct ecubtcuSetConfiguration_in {
    ECUBTCU_EQUIPMENT_NAME pEquipmentName;
    ECUBTCU_DEVICE_NAME pDeviceName;
    ECUBTCU_INDEX_NAME pParameterName;
    ECUBTCU_CONFIG_DATA pValue;
};

struct ecubtcuSetConfiguration_out {
    STATUS returnValue;
};

struct ecubtcuEndSetConfiguration_out {
    STATUS returnValue;
};

struct ecubtcuRequestShutdown_out {
    STATUS returnValue;
};

struct group3SetOffset_in {
    double offset;
};

struct group3SetOffset_out {
    STATUS returnValue;
};

struct group3SetGain_in {
    double gain;
};

struct group3SetGain_out {
    STATUS returnValue;
};

struct bpmInsert_in {
    BPM_DEVICE_NAME pName;
};

struct bpmInsert_out {
    STATUS returnValue;
};

struct bpmRetract_in {
    BPM_DEVICE_NAME pName;
};

struct bpmRetract_out {
    STATUS returnValue;
};

struct bsInsert_in {
    BS_DEVICE_NAME pName;
};

struct bsInsert_out {
    STATUS returnValue;
};

struct bsRetract_in {
    BS_DEVICE_NAME pName;
};

struct bsRetract_out {
    STATUS returnValue;
};

struct stepperIoExcite_in {
    STEPPER_DEVICE_NAME pName;
};

struct stepperIoExcite_out {
    STATUS returnValue;
};

struct stepperIoDesexcite_in {
    STEPPER_DEVICE_NAME pName;
};

struct stepperIoDesexcite_out {
    STATUS returnValue;
};

struct stepperIoCheckExcitation_in {
    STEPPER_DEVICE_NAME pName;
};

struct stepperIoCheckExcitation_out {
    STATUS returnValue;
};

struct analogPsSetVoltage_in {
    DEVICE_NAME pName;
    double setVoltage;
};

struct analogPsSetVoltage_out {
    STATUS returnValue;
};

struct analogPsSetCurrent_in {
    DEVICE_NAME pName;
    double setCurrent;
};

struct analogPsSetCurrent_out {
    STATUS returnValue;
};

struct bcmStartCalibration_in {
    DEVICE_NAME pName;
};

struct bcmStartCalibration_out {
    STATUS returnValue;
};

struct bcmChangeMode_in {
    DEVICE_NAME pName;
    BCM_CONVERSION_TYPE mode;
    BCM_TRIGGER_TYPE acqType;
};

struct bcmChangeMode_out {
    STATUS returnValue;
};

struct bcmReset_in {
    DEVICE_NAME pName;
};

struct bcmReset_out {
    STATUS returnValue;
};

struct bpmStartContinuousAcquisition_in {
    DEVICE_NAME pName;
};

struct bpmStartContinuousAcquisition_out {
    STATUS returnValue;
};

struct bpmStopContinuousAcquisition_in {
    DEVICE_NAME pName;
};

struct bpmStopContinuousAcquisition_out {
    STATUS returnValue;
};

struct bpmStartCalibration_in {
    DEVICE_NAME pName;
};

struct bpmStartCalibration_out {
    STATUS returnValue;
};

struct bpmStartProfileAcquisition_in {
    DEVICE_NAME pName;
    int sample;
};

struct bpmStartProfileAcquisition_out {
    STATUS returnValue;
};

struct bpmStopProfileAcquisition_in {
    DEVICE_NAME pName;
};

struct bpmStopProfileAcquisition_out {
    STATUS returnValue;
};

struct bpmChangeGain_in {
    DEVICE_NAME pName;
    int gain;
};

struct bpmChangeGain_out {
    STATUS returnValue;
};

struct bpmChangeMode_in {
    DEVICE_NAME pName;
    BPM_ACQUISITION_MODE mode;
    BPM_TRIGGER_TYPE acqType;
};

struct bpmChangeMode_out {
    STATUS returnValue;
};

struct bpmDecreaseRangeByFactor_in {
    DEVICE_NAME pName;
    double factor;
};

struct bpmDecreaseRangeByFactor_out {
    STATUS returnValue;
};

struct bpmIncreaseRangeByFactor_in {
    DEVICE_NAME pName;
    double factor;
};

struct bpmIncreaseRangeByFactor_out {
    STATUS returnValue;
};

struct bpmReset_in {
    DEVICE_NAME pName;
};

struct bpmReset_out {
    STATUS returnValue;
};

struct canMagnetSetValue_in {
    DEVICE_NAME pName;
    UINT16 setPoint;
};

struct canMagnetSetValue_out {
    STATUS returnValue;
};

struct canMagnetSetCurrent_in {
    DEVICE_NAME pName;
    double setCurrent;
};

struct canMagnetSetCurrent_out {
    STATUS returnValue;
};

struct canMagnetSetField_in {
    DEVICE_NAME pName;
    double setField;
};

struct canMagnetSetField_out {
    STATUS returnValue;
};

struct canMagnetStartCyclingDigit_in {
    DEVICE_NAME pName;
    UINT16 setPoint;
};

struct canMagnetStartCyclingDigit_out {
    STATUS returnValue;
};

struct canMagnetStartCyclingCurrent_in {
    DEVICE_NAME pName;
    double setCurrent;
};

struct canMagnetStartCyclingCurrent_out {
    STATUS returnValue;
};

struct canMagnetStartCyclingField_in {
    DEVICE_NAME pName;
    double setField;
};

struct canMagnetStartCyclingField_out {
    STATUS returnValue;
};

struct degraderGoHome_out {
    STATUS returnValue;
};

struct degraderHighGoPosition_in {
    int steps;
};

struct degraderHighGoPosition_out {
    STATUS returnValue;
};

struct degraderGoStair_in {
    int stairIndex;
};

struct degraderGoStair_out {
    STATUS returnValue;
};

struct degraderGoOnePlus_out {
    STATUS returnValue;
};

struct degraderGoOneMinus_out {
    STATUS returnValue;
};

struct degraderGoRelative_in {
    int relStair;
};

struct degraderGoRelative_out {
    STATUS returnValue;
};

struct degraderCheckStair_in {
    int param;
};

struct degraderCheckStair_out {
    STATUS returnValue;
};

struct degraderGoEnergy_in {
    double energy;
};

struct degraderGoEnergy_out {
    STATUS returnValue;
};

struct degraderCheckEnergy_in {
    double energy;
};

struct degraderCheckEnergy_out {
    STATUS returnValue;
};

struct iseuRequestSetLookUpMode_out {
    STATUS returnValue;
};

struct iseuRequestSetInternalPulseMode_out {
    STATUS returnValue;
};

struct iseuRequestSetTreatmentRoom_in {
    int roomId;
};

struct iseuRequestSetTreatmentRoom_out {
    STATUS returnValue;
};

struct iseuRequestSetEndOfTreatmentMode_out {
    STATUS returnValue;
};

struct iseuRequestGeneratePulse_out {
    STATUS returnValue;
};

struct iseuRequestSetSinglePulseMode_in {
    int flag;
};

struct iseuRequestSetSinglePulseMode_out {
    STATUS returnValue;
};

struct iseuRequestBypassRegulation_in {
    int flag;
};

struct iseuRequestBypassRegulation_out {
    STATUS returnValue;
};

struct iseuRequestSetCurrentAtCycloExit_in {
    double current;
};

struct iseuRequestSetCurrentAtCycloExit_out {
    STATUS returnValue;
};

struct beamLineSelectBeamLine_in {
    BEAM_TUNING_BEAM_LINES_NAMES beamLineName;
};

struct beamLineSelectBeamLine_out {
    STATUS returnValue;
};

struct beamLineUnselectBeamLine_out {
    STATUS returnValue;
};

struct beamLineSetRange_in {
    double range;
    double gantryAngle;
};

struct beamLineSetRange_out {
    STATUS returnValue;
};

struct beamLineSetDegraderToRange_out {
    STATUS returnValue;
};

struct beamLineSetDegraderToBeamStop_out {
    STATUS returnValue;
};

struct beamLineStartTuning_in {
    BEAM_TUNING_MODE mode;
};

struct beamLineStartTuning_out {
    STATUS returnValue;
};

struct beamLineStopTuning_out {
    STATUS returnValue;
};

struct beamLineResetTuning_out {
    STATUS returnValue;
};

struct beamLineTuneNextBlock_out {
    STATUS returnValue;
};

struct beamLineRedoTuningBlock_out {
    STATUS returnValue;
};

struct beamLineByPassTuningBlock_out {
    STATUS returnValue;
};

struct beamLineManualAcquire_out {
    STATUS returnValue;
};

struct beamLineStopManualAcquire_out {
    STATUS returnValue;
};

struct beamLineSaveReferenceSetPoint_in {
    BEAM_TUNING_BEAM_LINES_NAMES beamLineName;
    BEAM_LINE_REF_SETPOINT_TYPE referenceType;
};

struct beamLineSaveReferenceSetPoint_out {
    STATUS returnValue;
};

struct beamLineStartPhaseSpace_in {
    DEVICE_NAME pMeasName;
    DEVICE_NAME pMagnetName;
    int numberOfStep;
    double lowSetpoint;
    double highSetpoint;
};

struct beamLineStartPhaseSpace_out {
    STATUS returnValue;
};

struct ecuTcuBeamTuningNotStarted_out {
    STATUS returnValue;
};

struct ecuTcuBeamTuningStarted_out {
    STATUS returnValue;
};

struct ecuTcuCountingNotStarted_out {
    STATUS returnValue;
};

struct ecuTcuCountingStarted_out {
    STATUS returnValue;
};

struct ecuTcuOnRequestAcquisition_in {
    ECU_TCU_RESPONSE response;
};

struct ecuTcuOnRequestAcquisition_out {
    STATUS returnValue;
};

program RPC_PROGRAM {
    version RPC_VERSION {
        ecubtcuSetConfiguration_out ECUBTCUSETCONFIGURATION(ecubtcuSetConfiguration_in) = 1;
        ecubtcuEndSetConfiguration_out ECUBTCUENDSETCONFIGURATION(void) = 2;
        ecubtcuRequestShutdown_out ECUBTCUREQUESTSHUTDOWN(void) = 3;
        group3SetOffset_out GROUP3SETOFFSET(group3SetOffset_in) = 4;
        group3SetGain_out GROUP3SETGAIN(group3SetGain_in) = 5;
        bpmInsert_out BPMINSERT(bpmInsert_in) = 6;
        bpmRetract_out BPMRETRACT(bpmRetract_in) = 7;
        bsInsert_out BSINSERT(bsInsert_in) = 8;
        bsRetract_out BSRETRACT(bsRetract_in) = 9;
        stepperIoExcite_out STEPPERIOEXCITE(stepperIoExcite_in) = 10;
        stepperIoDesexcite_out STEPPERIODESEXCITE(stepperIoDesexcite_in) = 11;
        stepperIoCheckExcitation_out STEPPERIOCHECKEXCITATION(stepperIoCheckExcitation_in) = 12;
        analogPsSetVoltage_out ANALOGPSSETVOLTAGE(analogPsSetVoltage_in) = 13;
        analogPsSetCurrent_out ANALOGPSSETCURRENT(analogPsSetCurrent_in) = 14;
        bcmStartCalibration_out BCMSTARTCALIBRATION(bcmStartCalibration_in) = 15;
        bcmChangeMode_out BCMCHANGEMODE(bcmChangeMode_in) = 16;
        bcmReset_out BCMRESET(bcmReset_in) = 17;
        bpmStartContinuousAcquisition_out BPMSTARTCONTINUOUSACQUISITION(bpmStartContinuousAcquisition_in) = 18;
        bpmStopContinuousAcquisition_out BPMSTOPCONTINUOUSACQUISITION(bpmStopContinuousAcquisition_in) = 19;
        bpmStartCalibration_out BPMSTARTCALIBRATION(bpmStartCalibration_in) = 20;
        bpmStartProfileAcquisition_out BPMSTARTPROFILEACQUISITION(bpmStartProfileAcquisition_in) = 21;
        bpmStopProfileAcquisition_out BPMSTOPPROFILEACQUISITION(bpmStopProfileAcquisition_in) = 22;
        bpmChangeGain_out BPMCHANGEGAIN(bpmChangeGain_in) = 23;
        bpmChangeMode_out BPMCHANGEMODE(bpmChangeMode_in) = 24;
        bpmDecreaseRangeByFactor_out BPMDECREASERANGEBYFACTOR(bpmDecreaseRangeByFactor_in) = 25;
        bpmIncreaseRangeByFactor_out BPMINCREASERANGEBYFACTOR(bpmIncreaseRangeByFactor_in) = 26;
        bpmReset_out BPMRESET(bpmReset_in) = 27;
        canMagnetSetValue_out CANMAGNETSETVALUE(canMagnetSetValue_in) = 28;
        canMagnetSetCurrent_out CANMAGNETSETCURRENT(canMagnetSetCurrent_in) = 29;
        canMagnetSetField_out CANMAGNETSETFIELD(canMagnetSetField_in) = 30;
        canMagnetStartCyclingDigit_out CANMAGNETSTARTCYCLINGDIGIT(canMagnetStartCyclingDigit_in) = 31;
        canMagnetStartCyclingCurrent_out CANMAGNETSTARTCYCLINGCURRENT(canMagnetStartCyclingCurrent_in) = 32;
        canMagnetStartCyclingField_out CANMAGNETSTARTCYCLINGFIELD(canMagnetStartCyclingField_in) = 33;
        degraderGoHome_out DEGRADERGOHOME(void) = 34;
        degraderHighGoPosition_out DEGRADERHIGHGOPOSITION(degraderHighGoPosition_in) = 35;
        degraderGoStair_out DEGRADERGOSTAIR(degraderGoStair_in) = 36;
        degraderGoOnePlus_out DEGRADERGOONEPLUS(void) = 37;
        degraderGoOneMinus_out DEGRADERGOONEMINUS(void) = 38;
        degraderGoRelative_out DEGRADERGORELATIVE(degraderGoRelative_in) = 39;
        degraderCheckStair_out DEGRADERCHECKSTAIR(degraderCheckStair_in) = 40;
        degraderGoEnergy_out DEGRADERGOENERGY(degraderGoEnergy_in) = 41;
        degraderCheckEnergy_out DEGRADERCHECKENERGY(degraderCheckEnergy_in) = 42;
        iseuRequestSetLookUpMode_out ISEUREQUESTSETLOOKUPMODE(void) = 43;
        iseuRequestSetInternalPulseMode_out ISEUREQUESTSETINTERNALPULSEMODE(void) = 44;
        iseuRequestSetTreatmentRoom_out ISEUREQUESTSETTREATMENTROOM(iseuRequestSetTreatmentRoom_in) = 45;
        iseuRequestSetEndOfTreatmentMode_out ISEUREQUESTSETENDOFTREATMENTMODE(void) = 46;
        iseuRequestGeneratePulse_out ISEUREQUESTGENERATEPULSE(void) = 47;
        iseuRequestSetSinglePulseMode_out ISEUREQUESTSETSINGLEPULSEMODE(iseuRequestSetSinglePulseMode_in) = 48;
        iseuRequestBypassRegulation_out ISEUREQUESTBYPASSREGULATION(iseuRequestBypassRegulation_in) = 49;
        iseuRequestSetCurrentAtCycloExit_out ISEUREQUESTSETCURRENTATCYCLOEXIT(iseuRequestSetCurrentAtCycloExit_in) = 50;
        beamLineSelectBeamLine_out BEAMLINESELECTBEAMLINE(beamLineSelectBeamLine_in) = 51;
        beamLineUnselectBeamLine_out BEAMLINEUNSELECTBEAMLINE(void) = 52;
        beamLineSetRange_out BEAMLINESETRANGE(beamLineSetRange_in) = 53;
        beamLineSetDegraderToRange_out BEAMLINESETDEGRADERTORANGE(void) = 54;
        beamLineSetDegraderToBeamStop_out BEAMLINESETDEGRADERTOBEAMSTOP(void) = 55;
        beamLineStartTuning_out BEAMLINESTARTTUNING(beamLineStartTuning_in) = 56;
        beamLineStopTuning_out BEAMLINESTOPTUNING(void) = 57;
        beamLineResetTuning_out BEAMLINERESETTUNING(void) = 58;
        beamLineTuneNextBlock_out BEAMLINETUNENEXTBLOCK(void) = 59;
        beamLineRedoTuningBlock_out BEAMLINEREDOTUNINGBLOCK(void) = 60;
        beamLineByPassTuningBlock_out BEAMLINEBYPASSTUNINGBLOCK(void) = 61;
        beamLineManualAcquire_out BEAMLINEMANUALACQUIRE(void) = 62;
        beamLineStopManualAcquire_out BEAMLINESTOPMANUALACQUIRE(void) = 63;
        beamLineSaveReferenceSetPoint_out BEAMLINESAVEREFERENCESETPOINT(beamLineSaveReferenceSetPoint_in) = 64;
        beamLineStartPhaseSpace_out BEAMLINESTARTPHASESPACE(beamLineStartPhaseSpace_in) = 65;
        ecuTcuBeamTuningNotStarted_out ECUTCUBEAMTUNINGNOTSTARTED(void) = 66;
        ecuTcuBeamTuningStarted_out ECUTCUBEAMTUNINGSTARTED(void) = 67;
        ecuTcuCountingNotStarted_out ECUTCUCOUNTINGNOTSTARTED(void) = 68;
        ecuTcuCountingStarted_out ECUTCUCOUNTINGSTARTED(void) = 69;
        ecuTcuOnRequestAcquisition_out ECUTCUONREQUESTACQUISITION(ecuTcuOnRequestAcquisition_in) = 70;
    } = 1;
} = 55555103;

